{"200201": {"c": "IT 521", "n": "Object Oriented Design using UML and C++", "f": "FENS", "cr": 3.0, "ac": 18, "ca": 25, "pr": [], "co": [], "i": [{"tn": "Korkut Gule", "ta": 18, "tc": 25}], "ce": 0, "p": 66}, "200301": {"c": "IT 521", "n": "Object-oriented Programming with C++", "f": "FENS", "cr": 3.0, "ac": 22, "ca": 25, "pr": [], "co": [], "i": [{"tn": "Ersin Karabudak", "ta": 22, "tc": 25}], "ce": 1, "p": 71}, "catList": ["This course provides a tutorial to the core aspects of the language in a format designed to facilitate learning. Starting with a conceptual model of the UML, the course progressively applies the UML to a series of increasingly complex modelling problems across a variety of application domains. The basic process of software design using iterative, object-oriented techniques is also discussed during the course. This course helps students understand the principles of software engineering and its application in writing modular C++ programs for large-scale projects. It teaches students the essential topics of C++ such as encapsulation, inheritance, polymorphism, and overloading, and points out key programming techniques and strategies of converting existing C code to C++. Topics include Use Cases; Class Design; Object-Oriented Analysis; System Behavioral Modelling; Collaboration Diagrams; Design Class Diagrams; Mapping Designs to Code; C++ Classes; Memory Allocation; Overloading; Inheritance; Exception; Manipulators and Templates; Separate Compilation and Linking.", "Starting with a conceptual model of the UML, the course This course provides a tutorial to the core aspects of the language in a format designed to facilitate learning. This course will help students understand the principles of software engineering and its application in writing modular C++ programs for large-scale projects. It teaches students the essential topics of C++ such as encapsulation, inheritance, polymorphism, and overloading, and points out key programming techniques and strategies of converting existing C code to C++. Topics include Object-Oriented Analysis; C++ Classes; Memory Allocation; Overloading; Inheritance; Exception; Manipulators and Templates; Separate Compilation and Linking."]}